import threading
import random
import time
 
class Philosopher(threading.Thread):
 
    running = True
 
    def __init__(self, num, leftfork, rightfork):
        threading.Thread.__init__(self)
        self.num = num
        self.leftfork = leftfork
        self.rightfork = rightfork
 
    def run(self):
        while(self.running):
            time.sleep( random.uniform(20,50))
            print '%s is hungry and start waiting' % self.num
            self.dine()
 
    def dine(self):
        fork1, fork2 = self.leftfork, self.rightfork
 
        while self.running:
            fork1.acquire(True)
            occupy = fork2.acquire(False)
            if occupy: break
            fork1.release()
            print '%s swaps fork order' % self.num
            fork1, fork2 = fork2, fork1
        else:
            return
 
        self.dining()
        fork2.release()
        fork1.release()
 
    def dining(self):            
        print '%s starts eating '% self.num
        time.sleep(random.uniform(10,20))
        print '%s finishes eating and leaves to think.' % self.num
 
def DiningPhilosophers():
    forks = [threading.Lock() for n in range(5)]
    phi_nums = ('Phi1','Phi2','Phi3','Phi4', 'Phi5')
 
    philosophers= [Philosopher(phi_nums[i], forks[i%5], forks[(i+1)%5]) \
            for i in range(5)]
 

    Philosopher.running = True
    for p in philosophers: p.start()
    time.sleep(200)
    Philosopher.running = False
    print ("Now we're finishing.")
 
DiningPhilosophers()
